crystal_doc_search_index_callback({"repository_name":"testify","body":"# Testify\n\n[![CI Status](https://github.com/Nicolab/crystal-testify/workflows/CI/badge.svg?branch=master)](https://github.com/Nicolab/crystal-testify/actions) [![GitHub release](https://img.shields.io/github/release/Nicolab/crystal-testify.svg)](https://github.com/Nicolab/crystal-testify/releases) [![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://nicolab.github.io/crystal-testify/)\n\nTesting utilities for Crystal lang specs.\n\nSpecs or unit test style?\n\nThe both! Based on std's Crystal Spec, Testify is an OOP abstraction for creating unit and integration tests.\nThis allows structuring some tests in an objective of maintenability, extendability and reusability.\n\nSome tests require a Spec style:\n\n```crystal\nit \"should create an account and send a welcome email\" do\n  # ...\nend\n```\n\nOther tests require a unitary way:\n\n```crystal\ndef test_send_html_email\n  # ...\nend\n\ndef test_send_text_email\n  # ...\nend\n\ndef test_get_with_default_value\n  # ...\nend\n\ndef test_get_without_default_value\n  # ...\nend\n\ndef test_delete_by_id\n  # ...\nend\n```\n\nOther tests require the benefits of OOP. Advanced example:\n\n```crystal\n# Common tests for all model.\nabstract class ModelTest < Testify::Test\n  def before_all\n    db.connect\n    db.create_tables\n  end\n\n  def after_all\n    db.clean\n  end\n\n  def before_each\n    db.init\n  end\n\n  def after_each\n    db.reset\n  end\n\n  abstract def db : DBHelper\n  abstract def model_class : Model.class\n  abstract def get_model_values : Hash\n  abstract def get_updated_model_values : Hash\n\n  @[Data(\"get_model_values\")]\n  def test_create(values, expected)\n    model = model_class.create(values)\n    model.should be_a Model\n    model.to_h should eq expected\n  end\n\n  @[Data(\"get_updated_model_values\")]\n  def test_update(values, expected)\n    model_class.create(get_model_values)\n    model_class.update(values).to_h.should eq expected\n    # ...\n  end\n\n  def test_delete_by_id\n    id = model_class.create(get_model_values)\n    id.should be_a(Int32)\n    model_class.delete(id).rows_affected.should eq 1\n    model_class.find?(id).should eq nil\n  end\n\n  def test_find_by_id\n    # ...\n  end\nend\n```\n\nIn this example, thanks to `ModelTest` class defined above.\nBecause we define a common behavior that can be used by all the models that inherit it.\n\nWith the main benefits:\n\n* Common lifecycle hooks (before_all, before_each, ...).\n* Some tests common to all models do not need to be repeated.\n* Clean structured fashion for all models.\n* Reusability (example: `AdminTest < UserTest` that reuses common tests, states and `Data` source).\n\nCommon tests will be automatically executed (by inheritance):\n\n```crystal\n# Test cases for the User model.\nclass UserTest < ModelTest\n  getter db : DBHelper = DBHelper.new\n  getter model_class : Model.class = User\n\n  # `Data` source.\n  def get_model_values : Hash\n    {\n      \"username\" => \"foo\",\n      \"email\" => \"hello@example.org\",\n      # ...\n    }\n  end\n\n  # Updated `Data` source.\n  def get_updated_model_values : Hash\n    user_h = get_model_values\n    user_h[\"username\"] = \"bar\"\n    user_h[\"email\"] = \"updated@example.org\"\n    user_h\n  end\n\n  # Just write other tests specific to the model User...\nend\n```\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n```yaml\n   dependencies:\n     testify:\n       github: nicolab/crystal-testify\n       version: ~> 1.0.0 # Check the latest version!\n```\n\n2. Run `shards install`\n\n## Usage\n\nðŸ“˜ [API doc](https://nicolab.github.io/crystal-testify/).\n\n---\n\nBased and fully compliant with:\n\n* [Crystal Spec std's](https://crystal-lang.org/api/Spec.html)\n* [Testing Crystal Code](https://crystal-lang.org/reference/guides/testing.html)\n\n---\n\nDefine the test(s) class(es):\n\n```crystal\nrequire \"testify\"\n\nclass ExampleTest < Testify::Test\n  @hey = \"Crystal is awesome!\"\n\n  def test_something\n    true.should eq true\n  end\n\n  def test_my_mood\n    @hey.should eq \"Crystal is awesome!\"\n  end\n\n  # ...\nend\n\nclass AnotherTest < Testify::Test\n  def test_foo\n    true.should eq true\n    # ...\n  end\n\n  # ...\nend\n\n# Runs all test cases\nTestify.run_all\n```\n\nA `Test` class can be run alone:\n\n```crystal\n# Runs only ExampleTest tests\nExampleTest.run\n\n# Runs only AnotherTest tests\nAnotherTest.run\n```\n\nInternally, `Testify.run_all` executes the `run` method of each `Test` class defined.\n\n### POO\n\nAll benefits related to a class are available, like:\n\n* [macros: hooks](https://crystal-lang.org/reference/syntax_and_semantics/macros/hooks.html)\n* [finalize](https://crystal-lang.org/reference/syntax_and_semantics/finalize.html)\n* [annotations](https://crystal-lang.org/reference/syntax_and_semantics/annotations/index.html)\n* Macros, inheritance, modules, variables, methods, visibility, ... powerful ðŸš€\n\nUnder the hood:\n\n* A class defines a \"describe\" block.\n* Methods `test_` and `ftest_`, define a `it` block.\n* `ptest_` method, `Pending` and `Skip` annotations, define a `pending` block.\n* `ftest_` method and `Focus` annotation, add `focus: true` to a `it` block.\n* `Tags(\"foo\")` annotation on a `test` method, add `tags: \"foo\"` to a `it` block.\n* `Tags(\"foo\")` annotation on a `Test` class, add `tags: \"foo\"` to a `describe` block.\n\n### Lifecycle\n\nOptionally if you need life cycle hooks related to your tests.\n\n```crystal\nclass ExampleTest < Testify::Test\n  def before_all\n    puts \"before_all\"\n  end\n\n  def before_each\n    puts \"before_each\"\n  end\n\n  def around_all(test)\n    puts \"around_all - before\"\n    test.run\n    puts \"around_all - after\"\n  end\n\n  def around_each(test)\n    puts \"around_each - before\"\n    test.run\n    puts \"around_each - after\"\n  end\n\n  def after_all\n    puts \"before_all\"\n  end\n\n  def after_each\n    puts \"before_each\"\n  end\n\n  # ...\nend\n```\n\n### Initialize\n\nOptionally if you need to initialize some variables.\n\n```crystal\nclass ExampleTest < Testify::Test\n  # You can initialize variables, constants, contexts, ...\n\n  def initialize\n    # Configure here...\n  end\nend\n```\n\n### Test cases\n\nA test case, it's like:\n\n```crystal\nit \"my feature\" do\n  # ...\nend\n```\n\nExcept that this is written in the OOP way, in a method:\n\n```crystal\nclass ExampleTest < Testify::Test\n  # A test case\n  def test_my_feature\n    # ...\n  end\n\n  # Another test.\n  def test_another_thing\n    # ...\n  end\n\n  # ...\nend\n```\n\n### Pending test / Skip test\n\nPending test, it's like:\n\n```crystal\npending \"my feature\" do\n  # ...\nend\n```\n\nThis can be written:\n\n```crystal\nclass ExampleTest < Testify::Test\n  # Prefixed by `p`\n  def ptest_my_feature\n    # ...\n  end\n\n  # Pending test with `Pending` annotation.\n  @[Pending]\n  def test_my_feature\n    # ...\n  end\n\n  # Pending test with `Skip` annotation.\n  # Same as `Pending`, just another syntactic flavor.\n  @[Skip]\n  def test_my_feature\n    # ...\n  end\n\n  # ...\nend\n```\n\nA class can be skipped:\n\n```crystal\n@[Pending]\n# or @[Skip]\nclass ExampleTest < Testify::Test\n  # ...\nend\n```\n\nIt's like marking a `describe` block as `pending`.\nAll tests contained in the current class will be skipped.\n\n\n### Focused test\n\nFocused test, it's like:\n\n```crystal\nit \"my feature\", focus: true do\n  # ...\nend\n```\n\nThis can be written:\n\n```crystal\nclass ExampleTest < Testify::Test\n  # Prefixed by `f`\n  def ftest_my_feature\n  end\n\n  # Focused test with `Focus` annotation.\n  @[Focus]\n  def test_my_feature\n  end\nend\n```\n\nA class can be focused:\n\n```crystal\n@[Focus]\nclass ExampleTest < Testify::Test\n  # ...\nend\n```\n\nIt's like focusing a `describe` block.\nOnly the tests contained in the focused class will be executed.\n\n### Tags\n\nTags test with `Tags` annotation, it's like:\n\n```crystal\nit \"my feature\", tags: \"slow\" do\n  # ...\nend\n```\n\nThis can be written:\n\n```crystal\nclass ExampleTest < Testify::Test\n  @[Tags(\"slow\")]\n  def test_my_feature\n  end\nend\n```\n\nA class can be tagged:\n\n```crystal\n@[Tags(\"foo\")]\nclass ExampleTest < Testify::Test\n  # ...\nend\n```\n\nIt's like tagging a `describe` block.\n\n### Tacker / Tracer\n\nTracking utilities to trace some behaviors (like a method call, an event listener, a `spawn`, a `Channel`, ...).\n\n## Development\n\nInstall dev dependencies:\n\n```sh\nshards install\n```\n\nRun:\n\n```sh\ncrystal spec\n```\n\nClean before commit:\n\n```sh\ncrystal tool format\n./bin/ameba\n```\n\n## Contributing\n\n1. Fork it (https://github.com/Nicolab/crystal-testify/fork)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## LICENSE\n\n[MIT](https://github.com/Nicolab/crystal-testify/blob/master/LICENSE) (c) 2021, Nicolas Talle.\n\n## Author\n\n| [![Nicolas Tallefourtane - Nicolab.net](https://www.gravatar.com/avatar/d7dd0f4769f3aa48a3ecb308f0b457fc?s=64)](https://github.com/sponsors/Nicolab) |\n|---|\n| [Nicolas Talle](https://github.com/sponsors/Nicolab) |\n| [![Make a donation via Paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=PGRH4ZXP36GUC) |\n\n### Inspi\n\n* [Unit testing](https://en.wikipedia.org/wiki/Unit_testing)\n* [Integration testing](https://en.wikipedia.org/wiki/Integration_testing)\n* [Data-Driven testing](https://en.wikipedia.org/wiki/Data-driven_testing)\n* [ASPEC class](https://github.com/athena-framework/spec/blob/a28a66ee0985d5aed7948183a5942c1c04848a31/src/test_case.cr)\n* [Testing Crystal Code](https://crystal-lang.org/reference/guides/testing.html)\n* [Crystal Spec std's](https://crystal-lang.org/api/Spec.html)","program":{"html_id":"testify/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"testify","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"testify/Testify","path":"Testify.html","kind":"module","full_name":"Testify","name":"Testify","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/testify.cr","line_number":15,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/testify.cr#L15"}],"repository_name":"testify","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Testing utilities for Crystal lang specs.\n\nBased on std's [Crystal Spec](https://crystal-lang.org/reference/guides/testing.html),\nTestify is an OOP abstraction for creating unit and integration tests.\nThis allows structuring some tests in an objective of maintenability, extendability and reusability.\n\n> See [README](https://github.com/Nicolab/crystal-testify/) for more details and examples.","summary":"<p>Testing utilities for Crystal lang specs.</p>","class_methods":[{"id":"run_all:Hash(String,Test)-class-method","html_id":"run_all:Hash(String,Test)-class-method","name":"run_all","doc":"Runs all tests of the classes inherited from `Testify::Test` class.\n\nIs equivalent to manually calling `.run` on each `Test` class.","summary":"<p>Runs all tests of the classes inherited from <code><a href=\"Testify/Test.html\">Testify::Test</a></code> class.</p>","abstract":false,"args":[],"args_string":" : Hash(String, Test)","args_html":" : Hash(String, <a href=\"Testify/Test.html\">Test</a>)","location":{"filename":"src/testify.cr","line_number":19,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/testify.cr#L19"},"def":{"name":"run_all","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, Test)","visibility":"Public","body":"all = Hash(String, Test).new\n{% for tests_class in Test.all_subclasses.reject(&.abstract?) %}\n      fail %(\"{{ tests_class }}\" already mounted) if all[{{ tests_class.stringify }}]?\n      all[{{ tests_class.stringify }}] = {{ tests_class.id }}.run\n    {% end %}\nall\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"testify/Testify/Test","path":"Testify/Test.html","kind":"class","full_name":"Testify::Test","name":"Test","abstract":true,"superclass":{"html_id":"testify/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"testify/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"testify/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/testify.cr","line_number":40,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/testify.cr#L40"}],"repository_name":"testify","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"testify/Testify","kind":"module","full_name":"Testify","name":"Testify"},"doc":"Test class is equivalent of `describe` block (internally it's a mapping).\nIt is an alternative DSL ([Spec](https://crystal-lang.org/api/Spec.html) compliant)\nfor creating unit and integration tests.\n\nAny tests defined within a parent class will run for each child test case (by inheritance).\nMacros, `abstract def`, `super` and other OOP features can be used as well to reduce duplication.\n\nSome additional features are also built in, such as the `Data` annotation and `Tracker` module.\n\n> See [README](https://github.com/Nicolab/crystal-testify/) for more details and examples.","summary":"<p>Test class is equivalent of <code>describe</code> block (internally it's a mapping).</p>","class_methods":[{"id":"run-class-method","html_id":"run-class-method","name":"run","doc":"Runs the tests contained in the current `Test` class.\n\n> See `Testify.run_all` to run all tests contained in all the `Test` classes.","summary":"<p>Runs the tests contained in the current <code><a href=\"../Testify/Test.html\">Test</a></code> class.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/testify.cr","line_number":104,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/testify.cr#L104"},"def":{"name":"run","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"instance = ({{ @type }}).new\n{% if true %}\n        {% test_meth_reg = /^(?:f|p)?test_/ %}\n        {{ ((!(!(@type.annotation(Pending)))) || (!(!(@type.annotation(Skip))))) ? \"pending\".id : \"describe\".id }}(\n          {{ @type.name.stringify }},\n          focus: {{ !(!(@type.annotation(Focus))) }}\n          {% if (tags = @type.annotation(Tags)) %}, tags: {{ tags.args }}{% end %}\n        ) do\n          before_all do\n            instance.before_all\n          end\n\n          before_each do\n            instance.before_each\n          end\n\n          after_all do\n            instance.after_all\n          end\n\n          after_each do\n            instance.after_each\n          end\n\n          around_all do |procsy|\n            instance.around_all procsy\n          end\n\n          around_each do |procsy|\n            instance.around_each procsy\n          end\n\n          {% methods = [] of Nil %}\n\n          {% for parent in @type.ancestors.select(&.<(Testify::Test)) %}\n            {% for method in parent.methods.select do |__arg2|\n  __arg2.name =~ test_meth_reg\nend %}\n              {% methods << method %}\n            {% end %}\n          {% end %}\n\n          {% for test in methods + @type.methods.select do |__arg3|\n  __arg3.name =~ test_meth_reg\nend %}\n            {% focus = (test.name.starts_with?(\"ftest_\")) || (!(!(test.annotation(Focus)))) %}\n            {% tags = (tags = test.annotation(Tags)) ? tags.args : nil %}\n            {% spec_method = (((test.name.starts_with?(\"ptest_\")) || (!(!(test.annotation(Pending))))) || (!(!(test.annotation(Skip))))) ? \"pending\" : \"it\" %}\n            {% description = (test.name.stringify.gsub(test_meth_reg, \"\")).underscore.gsub(/_/, \" \") %}\n\n            {% if (test.annotations(Data)).empty? %}\n              {{ spec_method.id }}(\n                {{ description }},\n                file: {{ test.filename }},\n                line: {{ test.line_number }},\n                end_line: {{ test.end_line_number }},\n                focus: {{ focus }},\n                tags: {{ tags }}\n              ) do\n                instance.{{ test.name.id }}\n              end\n            {% else %}\n              {% for data_source in test.annotations(Data) %}\n                {% data_method_name = data_source[0] || (data_source.raise(\"\\n                    One or more annotations \\\"Data\\\" for test \\\"#{@type}##{test.name.id}\\\" does not have its data source provided as argument.\\n                  \")) %}\n\n                {% methods = @type.methods %}\n\n                {% for ancestor in @type.ancestors.select(&.<=(Testify::Test)) %}\n                  {% methods += ancestor.methods %}\n                {% end %}\n\n                {% data_method_return_type = (methods.find do |__arg5|\n  __arg5.name.stringify == data_method_name\nend.return_type || (raise(\"Data source \\\"#{@type}##{data_method_name.id}\\\" must return a Hash, NamedTuple, Array, or Tuple.\"))).resolve %}\n\n                {% if (data_method_return_type == Hash) || (data_method_return_type == NamedTuple) %}\n                  instance.{{ data_method_name.id }}.each do |name, args|\n                    {{ spec_method.id }}(\n                      \"#{{{ description }}} #{name}\",\n                      file: {{ test.filename }},\n                      line: {{ test.line_number }},\n                      end_line: {{ test.end_line_number }},\n                      focus: {{ focus }},\n                      tags: {{ tags }}\n                    ) do\n                      instance.{{ test.name.id }} *args\n                    end\n                  end\n                {% else %}{% if (data_method_return_type == Array) || (data_method_return_type == Tuple) %}\n                  instance.{{ data_method_name.id }}.each_with_index do |args, idx|\n                    {{ spec_method.id }}(\n                      \"#{{{ description }}} #{idx}\",\n                      file: {{ test.filename }},\n                      line: {{ test.line_number }},\n                      end_line: {{ test.end_line_number }},\n                      focus: {{ focus }},\n                      tags: {{ tags }}\n                    ) do\n                      instance.{{ test.name.id }} *args\n                    end\n                  end\n                {% else %}\n                  {% data_source.raise(\"Unsupported \\\"Data\\\" source return type: \\\"#{data_source.return_type}\\\"\") %}\n                {% end %}{% end %}\n              {% end %}\n            {% end %}\n          {% end %}\n        end\n      {% end %}\ninstance\n"}}],"constructors":[],"instance_methods":[{"id":"after_all:Nil-instance-method","html_id":"after_all:Nil-instance-method","name":"after_all","doc":"Method executed after the last test in the current class runs.\n\n```\nExampleTest < Testify::Test\n  def after_all : Nil\n    puts \"after_all\"\n  end\nend\n```","summary":"<p>Method executed after the last test in the current class runs.</p>","abstract":false,"args":[],"args_string":" : Nil","args_html":" : Nil","location":{"filename":"src/testify.cr","line_number":259,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/testify.cr#L259"},"def":{"name":"after_all","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":""}},{"id":"after_each:Nil-instance-method","html_id":"after_each:Nil-instance-method","name":"after_each","doc":"Method executed after each test in the current class runs.\n\n```\nExampleTest < Testify::Test\n  def after_each : Nil\n    puts \"after_each\"\n  end\nend\n```","summary":"<p>Method executed after each test in the current class runs.</p>","abstract":false,"args":[],"args_string":" : Nil","args_html":" : Nil","location":{"filename":"src/testify.cr","line_number":271,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/testify.cr#L271"},"def":{"name":"after_each","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":""}},{"id":"around_all(procsy):Nil-instance-method","html_id":"around_all(procsy):Nil-instance-method","name":"around_all","doc":"Method executed when the current class runs.\n\n```\nExampleTest < Testify::Test\n  def around_all(test) : Nil\n    puts \"around_all: before\"\n    test.run\n    puts \"around_all: after\"\n  end\nend\n```","summary":"<p>Method executed when the current class runs.</p>","abstract":false,"args":[{"name":"procsy","doc":null,"default_value":"","external_name":"procsy","restriction":""}],"args_string":"(procsy) : Nil","args_html":"(procsy) : Nil","location":{"filename":"src/testify.cr","line_number":285,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/testify.cr#L285"},"def":{"name":"around_all","args":[{"name":"procsy","doc":null,"default_value":"","external_name":"procsy","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"procsy.run"}},{"id":"around_each(procsy):Nil-instance-method","html_id":"around_each(procsy):Nil-instance-method","name":"around_each","doc":"Method executed when each test in the current class runs.\n\n```\nExampleTest < Testify::Test\n  def around_each(test) : Nil\n    puts \"around_each: before\"\n    test.run\n    puts \"around_each: after\"\n  end\nend\n```","summary":"<p>Method executed when each test in the current class runs.</p>","abstract":false,"args":[{"name":"procsy","doc":null,"default_value":"","external_name":"procsy","restriction":""}],"args_string":"(procsy) : Nil","args_html":"(procsy) : Nil","location":{"filename":"src/testify.cr","line_number":300,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/testify.cr#L300"},"def":{"name":"around_each","args":[{"name":"procsy","doc":null,"default_value":"","external_name":"procsy","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"procsy.run"}},{"id":"before_all:Nil-instance-method","html_id":"before_all:Nil-instance-method","name":"before_all","doc":"Method executed before the first test in the current class runs.\n\n```\nExampleTest < Testify::Test\n  def before_all : Nil\n    puts \"before_all\"\n  end\nend\n```","summary":"<p>Method executed before the first test in the current class runs.</p>","abstract":false,"args":[],"args_string":" : Nil","args_html":" : Nil","location":{"filename":"src/testify.cr","line_number":235,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/testify.cr#L235"},"def":{"name":"before_all","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":""}},{"id":"before_each:Nil-instance-method","html_id":"before_each:Nil-instance-method","name":"before_each","doc":"Method executed before each test in the current class runs.\n\n```\nExampleTest < Testify::Test\n  def before_each : Nil\n    puts \"before_each\"\n  end\nend\n```","summary":"<p>Method executed before each test in the current class runs.</p>","abstract":false,"args":[],"args_string":" : Nil","args_html":" : Nil","location":{"filename":"src/testify.cr","line_number":247,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/testify.cr#L247"},"def":{"name":"before_each","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":""}}],"macros":[],"types":[{"html_id":"testify/Testify/Test/Data","path":"Testify/Test/Data.html","kind":"annotation","full_name":"Testify::Test::Data","name":"Data","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/testify.cr","line_number":99,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/testify.cr#L99"}],"repository_name":"testify","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"testify/Testify/Test","kind":"class","full_name":"Testify::Test","name":"Test"},"doc":"Provides the data source to a specific test case (`test_` method).\n\nExample:\n\n```\nclass UserTest < Testify::Test\n  @[Data(\"get_model_values\")]\n  def test_create(values, expected)\n    user = User.create(values)\n    user.should be_a User\n    user.to_h should eq expected\n  end\n\n  # `Data` source.\n  def get_model_values : Hash\n    {\n      \"username\" => \"foo\",\n      \"email\"    => \"hello@example.org\",\n      # ...\n    }\n  end\nend\n```\n> See [data-driven testing](https://en.wikipedia.org/wiki/Data-driven_testing).","summary":"<p>Provides the data source to a specific test case (<code>test_</code> method).</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"testify/Testify/Test/Focus","path":"Testify/Test/Focus.html","kind":"annotation","full_name":"Testify::Test::Focus","name":"Focus","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/testify.cr","line_number":61,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/testify.cr#L61"}],"repository_name":"testify","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"testify/Testify/Test","kind":"class","full_name":"Testify::Test","name":"Test"},"doc":"Focuses a specific test case.\nOnly focused `Test` class(es) or `test_` method(s) will be executed.\n\n> See [Focusing Specs](https://crystal-lang.org/reference/guides/testing.html#focusing-on-a-group-of-specs)\nin the stdlib.","summary":"<p>Focuses a specific test case.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"testify/Testify/Test/Pending","path":"Testify/Test/Pending.html","kind":"annotation","full_name":"Testify::Test::Pending","name":"Pending","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/testify.cr","line_number":70,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/testify.cr#L70"}],"repository_name":"testify","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"testify/Testify/Test","kind":"class","full_name":"Testify::Test","name":"Test"},"doc":"Defines a specific test case as `pending`.\nA `Test` class or `test_` method marked as `Pending` is never evaluated.\nIt can be used to describe behaviour that is not yet implemented.\n\n> See [#pending](https://crystal-lang.org/api/master/Spec/Methods.html#pending%28description=%22assert%22,file=\n__FILE__,line=__LINE__,end_line=__END_LINE__,focus:Bool=false,tags:String%7CEnumerable%28String%29%7CNil=nil,\n&%29-instance-method) method.","summary":"<p>Defines a specific test case as <code>pending</code>.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"testify/Testify/Test/Skip","path":"Testify/Test/Skip.html","kind":"alias","full_name":"Testify::Test::Skip","name":"Skip","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/testify.cr","line_number":73,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/testify.cr#L73"}],"repository_name":"testify","program":false,"enum":false,"alias":true,"aliased":"Testify::Test::Pending","aliased_html":"<a href=\"../../Testify/Test/Pending.html\">Testify::Test::Pending</a>","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"testify/Testify/Test","kind":"class","full_name":"Testify::Test","name":"Test"},"doc":"Same as `Pending` (alias).","summary":"<p>Same as <code><a href=\"../../Testify/Test/Pending.html\">Pending</a></code> (alias).</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"testify/Testify/Test/Tags","path":"Testify/Test/Tags.html","kind":"annotation","full_name":"Testify::Test::Tags","name":"Tags","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/testify.cr","line_number":54,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/testify.cr#L54"}],"repository_name":"testify","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"testify/Testify/Test","kind":"class","full_name":"Testify::Test","name":"Test"},"doc":"`Tags` can be used to group tests and specs,\nallowing to only run a subset of tests and/or specs when providing a `--tag` argument to the spec runner.\n\nCan be tagged:\n\n* classes inherited from the `Test` class (equivalent of `describe` block);\n* and all `test_` methods (equivalent of `it` block);\n* and of course the blocks (with the `tags` argument): `describe`, `context` and `it`.\n\n> See [Tagging Specs](https://crystal-lang.org/reference/guides/testing.html#tagging-specs) in the stdlib.","summary":"<p><code><a href=\"../../Testify/Test/Tags.html\">Tags</a></code> can be used to group tests and specs, allowing to only run a subset of tests and/or specs when providing a <code>--tag</code> argument to the spec runner.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"testify/Testify/Tracker","path":"Testify/Tracker.html","kind":"module","full_name":"Testify::Tracker","name":"Tracker","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/tracer/log_tracer.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/log_tracer.cr#L8"},{"filename":"src/tracer/tracer.cr","line_number":9,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/tracer.cr#L9"}],"repository_name":"testify","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"testify/Testify","kind":"module","full_name":"Testify","name":"Testify"},"doc":"Tracking utilities to trace some behaviors (like a method call, an event listener, a `spawn`, a `Channel`, ...).","summary":"<p>Tracking utilities to trace some behaviors (like a method call, an event listener, a <code>spawn</code>, a <code>Channel</code>, ...).</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"testify/Testify/Tracker/LogTracer","path":"Testify/Tracker/LogTracer.html","kind":"class","full_name":"Testify::Tracker::LogTracer","name":"LogTracer","abstract":false,"superclass":{"html_id":"testify/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"testify/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"testify/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/tracer/log_tracer.cr","line_number":45,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/log_tracer.cr#L45"}],"repository_name":"testify","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"testify/Testify/Tracker","kind":"module","full_name":"Testify::Tracker","name":"Tracker"},"doc":"A simple `Tracer` implementation that logs calls.\nBy default it logs the number of calls of the `add` method\nbut it is possible to specify a different message to the `add` method.\n\n```\nclass ExampleTest < Testify::Test\n  include Testify::Tracker\n\n  def initialize\n    @tracer = LogTracer.new\n    log_trace(:initialize)\n    log_trace(:key_is_a_symbol_or_string)\n    log_trace(\"foo\", \"bar\")\n    log_trace(\"foo\", \"another trace for foo\")\n  end\n\n  def log_trace(name : String | Symbol, message : String? = nil) : Nil\n    @tracer.add(name, message)\n  end\n\n  def tracer_size(name : String | Symbol) : Int32\n    @tracer.size(name)\n  end\n\n  def tracer : LogTracer\n    @tracer\n  end\n\n  def test_example_tracer\n    tracer_size(\"foo\").should eq 2\n\n    # debug\n    pp tracer.get(\"foo\")\n  end\nend\n```","summary":"<p>A simple <code><a href=\"../../Testify/Tracker/Tracer.html\">Tracer</a></code> implementation that logs calls.</p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/tracer/log_tracer.cr","line_number":48,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/log_tracer.cr#L48"},"def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"add(name:String|Symbol,message:String?=nil)-instance-method","html_id":"add(name:String|Symbol,message:String?=nil)-instance-method","name":"add","doc":"Creates a trace referenced to the *name* namespace.\nThe default *message* is the increment number of the current call (`#1, #2, #3, ...`).\nSee `Tracer#add`.","summary":"<p>Creates a trace referenced to the <em>name</em> namespace.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"}],"args_string":"(name : String | Symbol, message : String? = <span class=\"n\">nil</span>)","args_html":"(name : String | Symbol, message : String? = <span class=\"n\">nil</span>)","location":{"filename":"src/tracer/log_tracer.cr","line_number":55,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/log_tracer.cr#L55"},"def":{"name":"add","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"},{"name":"message","doc":null,"default_value":"nil","external_name":"message","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@tracer.add(name, [message.nil? || message.empty? ? \"##{(size(name)) + 1}\" : message])"}},{"id":"size(name:String|Symbol):Int32-instance-method","html_id":"size(name:String|Symbol):Int32-instance-method","name":"size","doc":"Returns the number of traces performed.\nSee `Tracer#size`.","summary":"<p>Returns the number of traces performed.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"}],"args_string":"(name : String | Symbol) : Int32","args_html":"(name : String | Symbol) : Int32","location":{"filename":"src/tracer/log_tracer.cr","line_number":61,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/log_tracer.cr#L61"},"def":{"name":"size","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@tracer.size(name)"}},{"id":"tracer:Tracer(String)-instance-method","html_id":"tracer:Tracer(String)-instance-method","name":"tracer","doc":"Returns the `Tracer` instance used by the `LogTracer` instance.","summary":"<p>Returns the <code><a href=\"../../Testify/Tracker/Tracer.html\">Tracer</a></code> instance used by the <code><a href=\"../../Testify/Tracker/LogTracer.html\">LogTracer</a></code> instance.</p>","abstract":false,"args":[],"args_string":" : Tracer(String)","args_html":" : <a href=\"../../Testify/Tracker/Tracer.html\">Tracer</a>(String)","location":{"filename":"src/tracer/log_tracer.cr","line_number":72,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/log_tracer.cr#L72"},"def":{"name":"tracer","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Tracer(String)","visibility":"Public","body":"@tracer"}},{"id":"traces-instance-method","html_id":"traces-instance-method","name":"traces","doc":"Returns all traces.\nSee `Tracer#traces`.","summary":"<p>Returns all traces.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/tracer/log_tracer.cr","line_number":67,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/log_tracer.cr#L67"},"def":{"name":"traces","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@tracer.traces"}}],"macros":[],"types":[]},{"html_id":"testify/Testify/Tracker/Tracer","path":"Testify/Tracker/Tracer.html","kind":"class","full_name":"Testify::Tracker::Tracer(A)","name":"Tracer","abstract":false,"superclass":{"html_id":"testify/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"testify/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"testify/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/tracer/arg.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/arg.cr#L8"},{"filename":"src/tracer/trace.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/trace.cr#L8"},{"filename":"src/tracer/tracer.cr","line_number":13,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/tracer.cr#L13"}],"repository_name":"testify","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"testify/Testify/Tracker","kind":"module","full_name":"Testify::Tracker","name":"Tracker"},"doc":"Creates a tracer that can trace calls, elapsed time, etc with some data.\n\n> See `LogTracer` for an example.","summary":"<p>Creates a tracer that can trace calls, elapsed time, etc with some data.</p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/tracer/tracer.cr","line_number":16,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/tracer.cr#L16"},"def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Tracer(A).allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"add(name:String|Symbol,args:Array)-instance-method","html_id":"add(name:String|Symbol,args:Array)-instance-method","name":"add","doc":"Creates a trace referenced to the *name* namespace.","summary":"<p>Creates a trace referenced to the <em>name</em> namespace.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array"}],"args_string":"(name : String | Symbol, args : Array)","args_html":"(name : String | Symbol, args : Array)","location":{"filename":"src/tracer/tracer.cr","line_number":32,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/tracer.cr#L32"},"def":{"name":"add","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"name = name.to_s\nif @traces.has_key?(name)\nelse\n  @traces[name] = [] of Trace(A)\nend\ni = 0\n@traces[name] << (Trace.new(period, args.map do |arg|\n  Arg(typeof(arg)).new(\"#{name}##{i = i + 1}\", arg)\nend))\n"}},{"id":"args?(name:String|Symbol,index:Int32):Array(Arg(A))-instance-method","html_id":"args?(name:String|Symbol,index:Int32):Array(Arg(A))-instance-method","name":"args?","doc":"Returns `Trace` arguments added to *name* at *index*.","summary":"<p>Returns <code><a href=\"../../Testify/Tracker/Tracer/Trace.html\">Trace</a></code> arguments added to <em>name</em> at <em>index</em>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int32"}],"args_string":"(name : String | Symbol, index : Int32) : Array(Arg(A))","args_html":"(name : String | Symbol, index : Int32) : Array(<a href=\"../../Testify/Tracker/Tracer/Arg.html\">Arg</a>(A))","location":{"filename":"src/tracer/tracer.cr","line_number":78,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/tracer.cr#L78"},"def":{"name":"args?","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Arg(A))","visibility":"Public","body":"if trace = get?(name, index)\nelse\n  return nil\nend\ntrace.args?\n"}},{"id":"args_values?(name:String|Symbol,index:Int32):Array(A)-instance-method","html_id":"args_values?(name:String|Symbol,index:Int32):Array(A)-instance-method","name":"args_values?","doc":"Returns the values of `Trace` arguments added to *name* at *index*.","summary":"<p>Returns the values of <code><a href=\"../../Testify/Tracker/Tracer/Trace.html\">Trace</a></code> arguments added to <em>name</em> at <em>index</em>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int32"}],"args_string":"(name : String | Symbol, index : Int32) : Array(A)","args_html":"(name : String | Symbol, index : Int32) : Array(A)","location":{"filename":"src/tracer/tracer.cr","line_number":84,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/tracer.cr#L84"},"def":{"name":"args_values?","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(A)","visibility":"Public","body":"if trace = get?(name, index)\nelse\n  return nil\nend\ntrace.args_values?\n"}},{"id":"get(name:String|Symbol,index:Int32):Trace(A)-instance-method","html_id":"get(name:String|Symbol,index:Int32):Trace(A)-instance-method","name":"get","doc":"Returns `Trace` instance of *name* at *index*.","summary":"<p>Returns <code><a href=\"../../Testify/Tracker/Tracer/Trace.html\">Trace</a></code> instance of <em>name</em> at <em>index</em>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int32"}],"args_string":"(name : String | Symbol, index : Int32) : Trace(A)","args_html":"(name : String | Symbol, index : Int32) : <a href=\"../../Testify/Tracker/Tracer/Trace.html\">Trace</a>(A)","location":{"filename":"src/tracer/tracer.cr","line_number":66,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/tracer.cr#L66"},"def":{"name":"get","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Trace(A)","visibility":"Public","body":"@traces[name.to_s][index]"}},{"id":"get(name:String|Symbol):Array(Trace(A))-instance-method","html_id":"get(name:String|Symbol):Array(Trace(A))-instance-method","name":"get","doc":"Returns entries of *name*.","summary":"<p>Returns entries of <em>name</em>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"}],"args_string":"(name : String | Symbol) : Array(Trace(A))","args_html":"(name : String | Symbol) : Array(<a href=\"../../Testify/Tracker/Tracer/Trace.html\">Trace</a>(A))","location":{"filename":"src/tracer/tracer.cr","line_number":56,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/tracer.cr#L56"},"def":{"name":"get","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Trace(A))","visibility":"Public","body":"@traces[name.to_s]"}},{"id":"get?(name:String|Symbol,index:Int32):Trace(A)?-instance-method","html_id":"get?(name:String|Symbol,index:Int32):Trace(A)?-instance-method","name":"get?","doc":"Returns `Trace` instance of *name* at *index*.","summary":"<p>Returns <code><a href=\"../../Testify/Tracker/Tracer/Trace.html\">Trace</a></code> instance of <em>name</em> at <em>index</em>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int32"}],"args_string":"(name : String | Symbol, index : Int32) : Trace(A)?","args_html":"(name : String | Symbol, index : Int32) : <a href=\"../../Testify/Tracker/Tracer/Trace.html\">Trace</a>(A)?","location":{"filename":"src/tracer/tracer.cr","line_number":71,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/tracer.cr#L71"},"def":{"name":"get?","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Trace(A) | ::Nil","visibility":"Public","body":"name = name.to_s\nif list = @traces[name]?\nelse\n  return nil\nend\nlist[name][index]?\n"}},{"id":"get?(name:String|Symbol):Array(Trace(A))?-instance-method","html_id":"get?(name:String|Symbol):Array(Trace(A))?-instance-method","name":"get?","doc":"Returns entries of *name*.","summary":"<p>Returns entries of <em>name</em>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"}],"args_string":"(name : String | Symbol) : Array(Trace(A))?","args_html":"(name : String | Symbol) : Array(<a href=\"../../Testify/Tracker/Tracer/Trace.html\">Trace</a>(A))?","location":{"filename":"src/tracer/tracer.cr","line_number":61,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/tracer.cr#L61"},"def":{"name":"get?","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Trace(A)) | ::Nil","visibility":"Public","body":"@traces[name.to_s]?"}},{"id":"has?(name:String|Symbol):Bool-instance-method","html_id":"has?(name:String|Symbol):Bool-instance-method","name":"has?","doc":"Returns `true` if *name* has one or more traces.","summary":"<p>Returns <code>true</code> if <em>name</em> has one or more traces.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"}],"args_string":"(name : String | Symbol) : Bool","args_html":"(name : String | Symbol) : Bool","location":{"filename":"src/tracer/tracer.cr","line_number":42,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/tracer.cr#L42"},"def":{"name":"has?","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"name = name.to_s\nif (!(list = @traces[name]?)) || (list.size === 0)\n  return false\nend\ntrue\n"}},{"id":"period:Time::Span-instance-method","html_id":"period:Time::Span-instance-method","name":"period","doc":"Period (`Time.monotonic`) of the tracer creation.","summary":"<p>Period (<code>Time.monotonic</code>) of the tracer creation.</p>","abstract":false,"args":[],"args_string":" : Time::Span","args_html":" : Time::Span","location":{"filename":"src/tracer/tracer.cr","line_number":22,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/tracer.cr#L22"},"def":{"name":"period","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time::Span","visibility":"Public","body":"@period"}},{"id":"size(name:String|Symbol):Int32-instance-method","html_id":"size(name:String|Symbol):Int32-instance-method","name":"size","doc":"Returns the numbers of traces for *name*.","summary":"<p>Returns the numbers of traces for <em>name</em>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"}],"args_string":"(name : String | Symbol) : Int32","args_html":"(name : String | Symbol) : Int32","location":{"filename":"src/tracer/tracer.cr","line_number":49,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/tracer.cr#L49"},"def":{"name":"size","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"name = name.to_s\nif !(list = @traces[name]?)\n  return 0\nend\nlist.size\n"}},{"id":"traces:Hash(String,Array(Trace(A)))-instance-method","html_id":"traces:Hash(String,Array(Trace(A)))-instance-method","name":"traces","doc":"Returns a `Hash` of all entries.","summary":"<p>Returns a <code>Hash</code> of all entries.</p>","abstract":false,"args":[],"args_string":" : Hash(String, Array(Trace(A)))","args_html":" : Hash(String, Array(<a href=\"../../Testify/Tracker/Tracer/Trace.html\">Trace</a>(A)))","location":{"filename":"src/tracer/tracer.cr","line_number":27,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/tracer.cr#L27"},"def":{"name":"traces","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, Array(Trace(A)))","visibility":"Public","body":"@traces"}},{"id":"with_args?(name:String|Symbol,index:Int32,args:Array(Arg(A))):Bool-instance-method","html_id":"with_args?(name:String|Symbol,index:Int32,args:Array(Arg(A))):Bool-instance-method","name":"with_args?","doc":"Compares *args* with the `Trace` arguments added to *name* at *index*.","summary":"<p>Compares <em>args</em> with the <code><a href=\"../../Testify/Tracker/Tracer/Trace.html\">Trace</a></code> arguments added to <em>name</em> at <em>index</em>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int32"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(Arg(A))"}],"args_string":"(name : String | Symbol, index : Int32, args : Array(Arg(A))) : Bool","args_html":"(name : String | Symbol, index : Int32, args : Array(<a href=\"../../Testify/Tracker/Tracer/Arg.html\">Arg</a>(A))) : Bool","location":{"filename":"src/tracer/tracer.cr","line_number":90,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/tracer.cr#L90"},"def":{"name":"with_args?","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int32"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(Arg(A))"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"args == args?"}},{"id":"with_args?(name:String|Symbol,index:Int32,args:Array):Bool-instance-method","html_id":"with_args?(name:String|Symbol,index:Int32,args:Array):Bool-instance-method","name":"with_args?","doc":"Compares *args* with the `Trace` arguments added to *name* at *index*.","summary":"<p>Compares <em>args</em> with the <code><a href=\"../../Testify/Tracker/Tracer/Trace.html\">Trace</a></code> arguments added to <em>name</em> at <em>index</em>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int32"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array"}],"args_string":"(name : String | Symbol, index : Int32, args : Array) : Bool","args_html":"(name : String | Symbol, index : Int32, args : Array) : Bool","location":{"filename":"src/tracer/tracer.cr","line_number":95,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/tracer.cr#L95"},"def":{"name":"with_args?","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int32"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"args == (args_values?(name, index))"}}],"macros":[],"types":[{"html_id":"testify/Testify/Tracker/Tracer/Arg","path":"Testify/Tracker/Tracer/Arg.html","kind":"class","full_name":"Testify::Tracker::Tracer::Arg(T)","name":"Arg","abstract":false,"superclass":{"html_id":"testify/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"testify/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"testify/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/tracer/arg.cr","line_number":10,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/arg.cr#L10"}],"repository_name":"testify","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"testify/Testify/Tracker/Tracer","kind":"class","full_name":"Testify::Tracker::Tracer(A)","name":"Tracer"},"doc":"Represents an argument provided to the `Tracer` (used by `Trace`).","summary":"<p>Represents an argument provided to the <code><a href=\"../../../Testify/Tracker/Tracer.html\">Tracer</a></code> (used by <code><a href=\"../../../Testify/Tracker/Tracer/Trace.html\">Trace</a></code>).</p>","class_methods":[],"constructors":[{"id":"new(name:String|Symbol,value:T)-class-method","html_id":"new(name:String|Symbol,value:T)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(name : String | Symbol, value : T)","args_html":"(name : String | Symbol, value : T)","location":{"filename":"src/tracer/arg.cr","line_number":13,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/arg.cr#L13"},"def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | Symbol"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Arg(T).allocate\n_.initialize(name, value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":"Argument name.","summary":"<p>Argument name.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/tracer/arg.cr","line_number":18,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/arg.cr#L18"},"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@name"}},{"id":"value:T-instance-method","html_id":"value:T-instance-method","name":"value","doc":"Argument value.","summary":"<p>Argument value.</p>","abstract":false,"args":[],"args_string":" : T","args_html":" : T","location":{"filename":"src/tracer/arg.cr","line_number":23,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/arg.cr#L23"},"def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"@value"}}],"macros":[],"types":[]},{"html_id":"testify/Testify/Tracker/Tracer/Trace","path":"Testify/Tracker/Tracer/Trace.html","kind":"class","full_name":"Testify::Tracker::Tracer::Trace(A)","name":"Trace","abstract":false,"superclass":{"html_id":"testify/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"testify/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"testify/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/tracer/trace.cr","line_number":10,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/trace.cr#L10"}],"repository_name":"testify","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"testify/Testify/Tracker/Tracer","kind":"class","full_name":"Testify::Tracker::Tracer(A)","name":"Tracer"},"doc":"Represents a trace.","summary":"<p>Represents a trace.</p>","class_methods":[],"constructors":[{"id":"new(from_period:Time::Span,args:Array(Arg(A)))-class-method","html_id":"new(from_period:Time::Span,args:Array(Arg(A)))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"from_period","doc":null,"default_value":"","external_name":"from_period","restriction":"Time::Span"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(Arg(A))"}],"args_string":"(from_period : Time::Span, args : Array(Arg(A)))","args_html":"(from_period : Time::Span, args : Array(<a href=\"../../../Testify/Tracker/Tracer/Arg.html\">Arg</a>(A)))","location":{"filename":"src/tracer/trace.cr","line_number":20,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/trace.cr#L20"},"def":{"name":"new","args":[{"name":"from_period","doc":null,"default_value":"","external_name":"from_period","restriction":"Time::Span"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(Arg(A))"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Trace(A).allocate\n_.initialize(from_period, args)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(from_period:Time::Span)-class-method","html_id":"new(from_period:Time::Span)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"from_period","doc":null,"default_value":"","external_name":"from_period","restriction":"Time::Span"}],"args_string":"(from_period : Time::Span)","args_html":"(from_period : Time::Span)","location":{"filename":"src/tracer/trace.cr","line_number":15,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/trace.cr#L15"},"def":{"name":"new","args":[{"name":"from_period","doc":null,"default_value":"","external_name":"from_period","restriction":"Time::Span"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Trace(A).allocate\n_.initialize(from_period)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"args:Array(Arg(A))-instance-method","html_id":"args:Array(Arg(A))-instance-method","name":"args","doc":"Returns arguments added to the `Trace` instance.","summary":"<p>Returns arguments added to the <code><a href=\"../../../Testify/Tracker/Tracer/Trace.html\">Trace</a></code> instance.</p>","abstract":false,"args":[],"args_string":" : Array(Arg(A))","args_html":" : Array(<a href=\"../../../Testify/Tracker/Tracer/Arg.html\">Arg</a>(A))","location":{"filename":"src/tracer/trace.cr","line_number":36,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/trace.cr#L36"},"def":{"name":"args","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Arg(A))","visibility":"Public","body":"@args.not_nil!"}},{"id":"args?:Array(Arg(A))?-instance-method","html_id":"args?:Array(Arg(A))?-instance-method","name":"args?","doc":"Returns arguments added to the `Trace` instance.","summary":"<p>Returns arguments added to the <code><a href=\"../../../Testify/Tracker/Tracer/Trace.html\">Trace</a></code> instance.</p>","abstract":false,"args":[],"args_string":" : Array(Arg(A))?","args_html":" : Array(<a href=\"../../../Testify/Tracker/Tracer/Arg.html\">Arg</a>(A))?","location":{"filename":"src/tracer/trace.cr","line_number":41,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/trace.cr#L41"},"def":{"name":"args?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Arg(A)) | ::Nil","visibility":"Public","body":"@args"}},{"id":"args_values?:Array(A)?-instance-method","html_id":"args_values?:Array(A)?-instance-method","name":"args_values?","doc":"Returns the arguments values provided to the `Trace`.","summary":"<p>Returns the arguments values provided to the <code><a href=\"../../../Testify/Tracker/Tracer/Trace.html\">Trace</a></code>.</p>","abstract":false,"args":[],"args_string":" : Array(A)?","args_html":" : Array(A)?","location":{"filename":"src/tracer/trace.cr","line_number":46,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/trace.cr#L46"},"def":{"name":"args_values?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(A) | ::Nil","visibility":"Public","body":"if @args\nelse\n  return nil\nend\n@args.map(&.value)\n"}},{"id":"elapsed_time:Time::Span-instance-method","html_id":"elapsed_time:Time::Span-instance-method","name":"elapsed_time","doc":"Elasped time from the start period (*from_period* provided to `initialize`).","summary":"<p>Elasped time from the start period (<em>from_period</em> provided to <code>initialize</code>).</p>","abstract":false,"args":[],"args_string":" : Time::Span","args_html":" : Time::Span","location":{"filename":"src/tracer/trace.cr","line_number":31,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/trace.cr#L31"},"def":{"name":"elapsed_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time::Span","visibility":"Public","body":"@elapsed_time"}},{"id":"period:Time::Span-instance-method","html_id":"period:Time::Span-instance-method","name":"period","doc":"Period (`Time.monotonic`) of the trace creation.","summary":"<p>Period (<code>Time.monotonic</code>) of the trace creation.</p>","abstract":false,"args":[],"args_string":" : Time::Span","args_html":" : Time::Span","location":{"filename":"src/tracer/trace.cr","line_number":26,"url":"https://github.com/Nicolab/crystal-testify/blob/cca5ae9c34daaa526abbddb2f89e2a542c777ed4/src/tracer/trace.cr#L26"},"def":{"name":"period","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time::Span","visibility":"Public","body":"@period"}}],"macros":[],"types":[]}]}]}]}]}})